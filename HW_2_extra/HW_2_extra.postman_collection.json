{
	"info": {
		"_postman_id": "d64fc220-d538-4708-be64-c0e3a64dabba",
		"name": "HW_2_extra",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21445734"
	},
	"item": [
		{
			"name": "API(with CSV)",
			"item": [
				{
					"name": "1. (user_info_2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
									"Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
									"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
									"Требования:\r",
									"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
									"\r",
									"1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
									"*/\r",
									"let age = pm.iterationData.get('age');\r",
									"let name = pm.iterationData.get('name');\r",
									"let salary = pm.iterationData.get('salary');\r",
									"\r",
									"console.log(age,name,salary);\r",
									"//Positive tests\r",
									"if (name && age && salary) {\r",
									"        const isValid_name = function (param) {\r",
									"            return (param.length >= 3 && param.length <= 40 && (param.trim().length == param.length) && typeof (param) == 'string');\r",
									"        };\r",
									"        const isValid_age = function (param) {\r",
									"            param = +param\r",
									"            return (param >= 18 && param <= 120 && Number.isInteger(+param) && !isNaN(param));\r",
									"        };\r",
									"        const isValid_salary = function (param) {\r",
									"            param = +param\r",
									"            return (param >= 1 && param <= 1000000 && Number.isInteger(+param));\r",
									"        };\r",
									"        const isValid_all = function () {\r",
									"            return isValid_name(name) && isValid_age(age) && isValid_salary(salary);\r",
									"        };\r",
									"\r",
									"    if (isValid_all()) {\r",
									"        pm.test(`Verify status code is 200 name: ${name}, age: ${age}, salary: ${salary}`, () => { pm.response.to.have.status(200); });\r",
									"    } else {\r",
									"        pm.test(`Verify status code is NOT 200 name: ${name}, age: ${age}, salary: ${salary}`, () => { pm.response.to.not.have.status(200); });\r",
									"    }\r",
									"} else {\r",
									"    pm.test(`Verify status code is NOT 200 name: ${name}, age: ${age}, salary: ${salary}`, () => { pm.response.to.not.have.status(200); });\r",
									"};\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. (object_info_4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*2. http://162.55.220.72:5007/object_info_4\r",
							"* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary*/\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"let respData = pm.response.json();\r",
							"\r",
							"respData.salary.forEach((el, index) => {\r",
							"    pm.test(`resp salary[${index}] = req salary*${index + 1}`, function () {\r",
							"        pm.expect(+el).to.eql(+(reqData.salary) * (index + 1));\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=23&name=Vika&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "23",
							"description": "23"
						},
						{
							"key": "name",
							"value": "Vika",
							"description": "Vika"
						},
						{
							"key": "salary",
							"value": "5000",
							"description": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3. (object_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*3. http://162.55.220.72:5005/object_info_3\r",
							" Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"*/\r",
							"const req = pm.request.url.query.toObject()\r",
							"let resData = pm.response.json();\r",
							"const res = {}\r",
							"for (const key in req) {\r",
							"    //  console.log(key);\r",
							"    //  console.log(pm.response.json()[key]);\r",
							"    res[key] = isNaN(resData[key]) ? resData[key] : + resData[key]\r",
							"    req[key] = isNaN(req[key]) ? req[key] : +req[key] //перезаписуєм обєкт, якщо нан тоді залишаєм як є, якщо не нан переводим в число\r",
							"}\r",
							"pm.test('Check 2 obj', () => {\r",
							"    pm.expect(res).to.deep.equal(req)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. (user_info_2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*4. http://162.55.220.72:5005/user_info_2\r",
							"1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"let respData = pm.response.json();\r",
							"let reqData = request.data;\r",
							"\r",
							"let check_list = ['start_qa_salary','qa_salary_after_6_months','qa_salary_after_3.5_years','qa_salary_after_12_months','qa_salary_after_1.5_year'];\r",
							"\r",
							"check_list.forEach((el) => {\r",
							" pm.test(`resp has the key ${el}`, function () {\r",
							"    pm.expect(respData).to.have.property(el); \r",
							"    });\r",
							"});\r",
							"//___________________________________________________________________________\r",
							"\r",
							"const checking = function(...par){\r",
							"par.forEach(el => {pm.test(`resp has the key ${el}`, function () {\r",
							"    pm.expect(respData).to.have.property(el); \r",
							"    });});\r",
							"};\r",
							"checking('start_qa_salary','qa_salary_after_6_months');\r",
							"\r",
							"/*2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"\r",
							"\r",
							"\r",
							"/*const checking1 = function (obj) {\r",
							"        for (const key in obj) {\r",
							"\r",
							"        pm.test(`${key} (${respData[key]}) eql salary*${obj[key]} (${+reqData.salary * obj[key]}) from request`, function () {\r",
							"        pm.expect(respData[key]).to.eql(+reqData.salary * obj[key]);\r",
							"        });\r",
							"    };\r",
							"};\r",
							"checking1(salary_box);\r",
							"*/\r",
							"//3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"salary_box = {\r",
							"    start_qa_salary: 1,\r",
							"    qa_salary_after_6_months: 2,\r",
							"    qa_salary_after_12_months: 2.7,\r",
							"    'qa_salary_after_1.5_year': 3.3,\r",
							"    'qa_salary_after_3.5_years': 3.8\r",
							"}\r",
							"const checking2 = function (obj) {\r",
							"    for (const key in obj) {\r",
							"        pm.test(`[1 test] resp has the key ${key}`, () => {\r",
							"            pm.expect(respData).to.have.property(key);\r",
							"        });\r",
							"        pm.test(`[2 test] ${key} (${respData[key]}) eql salary*${obj[key]} (${+reqData.salary * obj[key]}) from request`, () => {\r",
							"            pm.expect(respData[key]).to.eql(+reqData.salary * obj[key]);\r",
							"        });\r",
							"    };\r",
							"};\r",
							"checking2(salary_box);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}