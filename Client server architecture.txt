Клиент-серверная архитектура

DataCenter - много серверов

http програмка что бы сделать что угодно сервером 

http методы

браузеры делают запрос на сервер и тот присылает клиет 

двохуровневая клиент-сервер
трехуровневая клиент-сервер-БД
многоуровневая клиент-сервер-БД-другие серваки

ендпоинт

API - Application Programm Interface

формат преобразования картинки в текст base 64

бизнес логику пишут backend dev

ядро браузере

парсить хтмл??

лейсхолдеры???

запрос отправляется методом пост

идентификация - по логину узнать человека
аутентификация - проверить пароль
авторизовать - отдать все на что есть права

Client_Server
 
1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура - это принципы организации взаимосвязи в сети между заказчиком (клиентом) и поставщиком (сервером), 

- это распределение сетевой нагрузки между заказчиком и поставщиком, которые взаимодействуют между собой через сетевые протоколы.

Клиент - программа с которым работает пользователь, может быть десктопное приложение, браузер или даже сам сервер.

Тонкий клиент( например браузер) - переносит большую часть вычеслительных процессов на сервер,вся бизнес-логика происходит на сервере.

Толстый клиент (1С, все онлайн-игры) - дает расширенную функциональность пользователю не зависимо от центрального сервера, вся обработка и представление данных происходит на машине клиента, а сервер выступает больше как хранилищем данных.
 
Сервер — компьютер, на котором хранится само приложение. Весь код, вся логика, все дополнительные материалы и справочники. 

Сервер нужен потому что:
- (он мощнее) для обработки запросов необходимо мощное железо, а у каждого пользователя его нет
поэтому вся бизнес-логика выноситься на отдельную мощную машину(сервер), что бы обрабатывать информацию быстро и возвращать ее клиенту.
- (не дублируется код) вся логка, код обработки, БД лежать в отдельном месте и много клиентов могут обратиться к серверу, самим им не надо хранить эту информацию
- (это безопаснее) вся информация храниться удаленно и сервер выдает инфо только по запросу и по доступу.

БД (база данных) — хранилище данных, отдельный программный продукт, который позволяет:
- быстро делать выборки информации;
- сохранять информацию даже при рестарте системы. Это называется персистентность.

Плюсы:
- Мощный сервер дешевле 100+ мощных клиентских машин
- Нет дублирования кода 
- Персональные данные в безопасности

Минусы:
- Если упало одно звено, все не работает. 
Для устранения этой проблемы делают кластер серверов а перед ними ставят балансировщик, который будет решать какой из серверов меньше загружен и кому отдать запрос. Аналогично с БД.
    Горячий резерв — когда у нас есть несколько серверов, работающих в параллель, и балансировщик распределяет нагрузку между ними.
    Холодного резерва — когда у нас второй сервер является резервной копией «на всякий случай». Все запросы идут на первый сервер, второй отдыхает.
- Высокая стоимость оборудования 
- Нужно нанять сисадмина



2) Что ткое HTTP и HTTPS

Транспортные протоколы: TCP(почта) - при передаче файлов есть гарантия, что данные дойдут до клиента или сервера. UDP(онлайн игры) - данные передаются непрерывным потоком и нет гарантии что данные точно дойдут до получателя)

HTTP - протокол прикладного уровня.

HTTP (HyperText Transfer Protocol) - протокол (свод правил) передачи гипертекста для обмена информации в сети. 
Стандартный протокол HTTP передаёт данные в открытом виде, это не безопасно. Порт 80 

HTTPS (HyperText Transfer Protocol Secure) — безопасный протокол передачи гипертекста — это расширение протокола HTTP, осуществляющее шифрование данных посредством протокола TLS или его предшественника - SSL. Порт 443

перед шифрованием сервер отсылает копию SSL-сертификата что бы браузер проверил его подленность у центра сертификации после чего создается ключ шифрования

Плюсы:
- доверие поисковых систем
- шифрование данных
- защита и проверка данных (сайт не испльзует кукис, проверка производиться на каждый сеанс обмена данными, а не основывается на отчетах прошлых сенсов)

Минусы:
- стоимость
- скорость и производительность
- требования к оборудованию

HTTP состоит из:
- основная часть(payload)(полезная нагрузка)
- системная инфа (headers)(заговки) описывается как payload должен передаваться 

обычно ответы с сервера приходят в формате html

HTTP request:
Method/Version of protocol
Headers

HTTP respond:
Version of protocol Status code Status message
Date
Headers
html



3) HTTP методы

Для того что бы обьяснить серверу что мы хотим сделать с информацией(ресурсом) используются методы

Каждий запрос состоит из: стартовая строка (обязательно), заголовки, тело.

(Request line)Стартовая строка запроса формата: METHOD URI HTTP/VERSION
URI -файл или абстрактный обьект, который необходимо получить 

(Message header)Заголовки (пара имя: значение):передается системная информация, кодировка сообщения, версия и имя браузера...

(Entity body)Тело сообщения - передаваемые данные. Для ответа это html-страница,для запроса это файлы загружаемые на сервер.

Методы бывают:
-безопасные (запрос который не меняет состояние сервера (только чтение)) GET, HEAD, OPTIONS
(все безопасные являются идемпотентными)
-идемпотентные (при повторном вызове идентичного запроса результат одинаковый) GET, HEAD, PUT и DELETE
-неидемпотентные (при повторном выполнении результаты будут отличаться) POST
-кешируемые (ответы результаты которых могут быть сохранены для дальнейшего использования
Метод, используемый в запросе, кешируемый, если это GET или HEAD
PUT и DELETE не кешируемые
Коды ответа, известные системе кеширования, которые рассматриваются как кешируемые: 200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501
PUT стирает кеширование всех методов которые были перед этим

GET — получение ресурса из указанного источника
влияет на содержимое -
кеширование +

POST — создание ресурса
влияет на содержимое +
кеширование -

PUT — загружает содержимое запроса на сервер на указаный URI, если такого URI нет то сервер создаст его и вернется с кодом 201
влияет на содержимое +
кеширование -

DELETE — удаление ресурса
влияет на содержимое +
кеширование -

HEAD - запрашивает ресурс как GET, но ответ приходит без тела.
(используют для проверки существует ли ресурс и не изменился ли он с последнего обращения)

OPTIONS - описание параметров коммуникации между клиентом и сервером.
влияет на содержимое -

CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель.

HTML поддерживает только GET и POST методы



4) HTTP статус коды сервера


5) Что такое ядро браузера 
6) Какие браузеры какиие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов