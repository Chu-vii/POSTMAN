Клиент-серверная архитектура

DataCenter - много серверов

http програмка что бы сделать что угодно сервером 

http методы

браузеры делают запрос на сервер и тот присылает клиет 

двохуровневая клиент-сервер
трехуровневая клиент-сервер-БД
многоуровневая клиент-сервер-БД-другие серваки

ендпоинт

API - Application Programm Interface

формат преобразования картинки в текст base 64

бизнес логику пишут backend dev

ядро браузере

парсить хтмл??

лейсхолдеры???

запрос отправляется методом пост

идентификация - по логину узнать человека
аутентификация - проверить пароль
авторизовать - отдать все на что есть права

Client_Server
 
1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура - это принципы организации взаимосвязи в сети между заказчиком (клиентом) и поставщиком (сервером), 

- это распределение сетевой нагрузки между заказчиком и поставщиком, которые взаимодействуют между собой через сетевые протоколы.

Клиент - программа с которым работает пользователь, может быть десктопное приложение, браузер или даже сам сервер.

Тонкий клиент( например браузер) - переносит большую часть вычеслительных процессов на сервер,вся бизнес-логика происходит на сервере.

Толстый клиент (1С, все онлайн-игры) - дает расширенную функциональность пользователю не зависимо от центрального сервера, вся обработка и представление данных происходит на машине клиента, а сервер выступает больше как хранилищем данных.
 
Сервер — компьютер, на котором хранится само приложение. Весь код, вся логика, все дополнительные материалы и справочники. 

Сервер нужен потому что:
- (он мощнее) для обработки запросов необходимо мощное железо, а у каждого пользователя его нет
поэтому вся бизнес-логика выноситься на отдельную мощную машину(сервер), что бы обрабатывать информацию быстро и возвращать ее клиенту.
- (не дублируется код) вся логка, код обработки, БД лежать в отдельном месте и много клиентов могут обратиться к серверу, самим им не надо хранить эту информацию
- (это безопаснее) вся информация храниться удаленно и сервер выдает инфо только по запросу и по доступу.

БД (база данных) — хранилище данных, отдельный программный продукт, который позволяет:
- быстро делать выборки информации;
- сохранять информацию даже при рестарте системы. Это называется персистентность.

Плюсы:
- Мощный сервер дешевле 100+ мощных клиентских машин
- Нет дублирования кода 
- Персональные данные в безопасности

Минусы:
- Если упало одно звено, все не работает. 
Для устранения этой проблемы делают кластер серверов а перед ними ставят балансировщик, который будет решать какой из серверов меньше загружен и кому отдать запрос. Аналогично с БД.
    Горячий резерв — когда у нас есть несколько серверов, работающих в параллель, и балансировщик распределяет нагрузку между ними.
    Холодного резерва — когда у нас второй сервер является резервной копией «на всякий случай». Все запросы идут на первый сервер, второй отдыхает.
- Высокая стоимость оборудования 
- Нужно нанять сисадмина
_______________________________________________________________________________________

2) Что ткое HTTP и HTTPS

Транспортные протоколы: TCP(почта) - при передаче файлов есть гарантия, что данные дойдут до клиента или сервера. UDP(онлайн игры) - данные передаются непрерывным потоком и нет гарантии что данные точно дойдут до получателя)

HTTP - протокол прикладного уровня.

HTTP (HyperText Transfer Protocol) - протокол (свод правил) передачи гипертекста для обмена информации в сети. 
Стандартный протокол HTTP передаёт данные в открытом виде, это не безопасно. Порт 80 

HTTPS (HyperText Transfer Protocol Secure) — безопасный протокол передачи гипертекста — это расширение протокола HTTP, осуществляющее шифрование данных посредством протокола TLS или его предшественника - SSL. Порт 443

перед шифрованием сервер отсылает копию SSL-сертификата что бы браузер проверил его подленность у центра сертификации после чего создается ключ шифрования

Плюсы:
- доверие поисковых систем
- шифрование данных
- защита и проверка данных (сайт не испльзует кукис, проверка производиться на каждый сеанс обмена данными, а не основывается на отчетах прошлых сенсов)

Минусы:
- стоимость
- скорость и производительность
- требования к оборудованию

HTTP состоит из:
- основная часть(payload)(полезная нагрузка)
- системная инфа (headers)(заговки) описывается как payload должен передаваться 

обычно ответы с сервера приходят в формате html

HTTP request:
Method/Version of protocol
Headers

HTTP respond:
Version of protocol Status code Status message
Date
Headers
html
_______________________________________________________________________________________

3) HTTP методы

Для того что бы обьяснить серверу что мы хотим сделать с информацией(ресурсом) используются методы

Каждий запрос состоит из: стартовая строка (обязательно), заголовки, тело.

(Request line)Стартовая строка запроса формата: METHOD URI HTTP/VERSION
URI -файл или абстрактный обьект, который необходимо получить 

(Message header)Заголовки (пара имя: значение):передается системная информация, кодировка сообщения, версия и имя браузера...

(Entity body)Тело сообщения - передаваемые данные. Для ответа это html-страница,для запроса это файлы загружаемые на сервер.

Методы бывают:
-безопасные (запрос который не меняет состояние сервера (только чтение)) GET, HEAD, OPTIONS
(все безопасные являются идемпотентными)
-идемпотентные (при повторном вызове идентичного запроса результат одинаковый) GET, HEAD, PUT и DELETE
-неидемпотентные (при повторном выполнении результаты будут отличаться) POST
-кешируемые (ответы результаты которых могут быть сохранены для дальнейшего использования
Метод, используемый в запросе, кешируемый, если это GET или HEAD
PUT и DELETE не кешируемые
Коды ответа, известные системе кеширования, которые рассматриваются как кешируемые: 200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501
PUT стирает кеширование всех методов которые были перед этим

GET — получение ресурса из указанного источника
влияет на содержимое -
кеширование +

POST — создание ресурса
влияет на содержимое +
кеширование -

PUT — загружает содержимое запроса на сервер на указаный URI, если такого URI нет то сервер создаст его и вернется с кодом 201
влияет на содержимое +
кеширование -

DELETE — удаление ресурса
влияет на содержимое +
кеширование -

HEAD - запрашивает ресурс как GET, но ответ приходит без тела.
(используют для проверки существует ли ресурс и не изменился ли он с последнего обращения)

OPTIONS - описание параметров коммуникации между клиентом и сервером.
влияет на содержимое -

CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель.

HTML поддерживает только GET и POST метод
______________________________________________________________________________________

4) HTTP статус коды сервера

1хх: (информационные коды) указывают, что запрос, инициированный браузером, продолжается.
2хх: (коды успешного запроса) возвращаются, когда запрос браузера был успешно получен, распознан и обработан сервером.
3хх: (коды перенаправления) возвращаются, когда запрошенный ресурс заменен новым.
4хх: (коды ошибок клиента) указывают на наличие проблемы с запросом.
5хх: (коды ошибок сервера) указывают, что запрос был принят, но ошибка на сервере не позволила выполнить его

100 Continue — сообщает, что сервер получтл первую часть запроса и готов принять остальную часть
101 Switching Protocols - сервер меняет протокол. Отправляется при наличии в запросе заголовка Upgrade
102 Processing - сервер в процессе формирования ответа, но обработка запроса еще не завершина.
103 Early Hints — сервер дает придварительный ответ с частью заголовков. Используется, когда сервер не может быстро сформировать все заголовки.
----------------------------------------
200 OK — сервер успешно обработал запрос
201 Created — сервер успешно обработал запрос и создал новый ресурс
202 Accepted — сервер начал обрабатывать запрос, но пока ещё не закончил процесс. В конечном итоге обработка запроса может как завершиться, так и не завершиться.
203 Non-Authoritative Information - сервер успешно обработал запрос, но ответ пришел не от первоисточника
204 No Content — сервер успешно обработал запрос, но кроме заголовков ответа нет содержимого, которое можно было бы отправить в ответ.
205 Reset Content (Сбросить содержимое) — сервер успешно обработал запрос и отправил в ответ команду сбросить данные, которые пользователь ввёл, перед тем как отправить запрос.
206 Partial Content (Частичное содержимое) —  сервер успешно обработал частичный запрос и отправил содержимое, указанное в заголовке Content-Range. Используется, например, для возобновления поставленной на паузу загрузки
----------------------------------------
300 Multiple Choices — «Множественный выбор» - есть несколько возможных ответов на запрос. Например, на сервере есть несколько типов файлов, которые отвечают условиям запроса. Пользователь или user-agent должен выбрать один из вариантов. 
301 Moved Permanently — «Перемещено навсегда» -запрашиваемый ресурс теперь доступен по новому URI и при последующих запросах надо использовать именно его.
302 Found — «Найдено» - запрашиваемый ресурс временно доступен по другому URI и при последующих запросах надо использовать старый URI
303 See Other — «Смотри в другом месте» - запрашиваемый ресурс нужно искать по другому URI с методом запроса GET, несмотря на то, что в изначальном запросе мог быть другой метод.
304 Not Modified — «Не изменено» - запрашиваемый ресурс не был изменён, поэтому надо использовать его кэшированную версию
----------------------------------------
400 Bad Request — «Неверный запрос». Сервер не может обработать запрос, потому что не понимает его. Например, из-за синтаксической ошибки
401 Unauthorized — «Неавторизованно». Сервер не может обработать запрос без аутентификации. Нужно добавить в заголовок запроса поле Authorization или проверить правильность данных в этом поле, если оно уже присутствует.
403 Forbidden — «Запрещено». Сервер отказывается обработать запрос, потому что у пользователя нет прав на просмотр содержимого.
404 Not Found — «Не найдено». Сервер не может найти запрашиваемый ресурс. 
405 Method Not Allowed — «Метод запрещён». Указанный в запросе метод нельзя использовать. Сервер ОБЯЗАН указать доступные методы в заголовке Allow.
406 Not Acceptable — «Неприемлемо». На сервере нет контента, который отвечает указанным в заголовках запроса характеристикам.
407 Proxy Authentication Required - Этот код ответа аналогичен коду 401, только аутентификация требуется для прокси сервера.
408 Request Timeout — «Истекло время ожидания ответа на запрос». Сервер не получил запрос полностью в течение максимально допустимого для этого времени. Такой код может возникнуть при передаче данных большого объёма методом PUT или POST.
409 Conflict — «Конфликт». Сервер не смог обработать запрос из-за того что содержимое этого запроса вступило в конфликт с параметрами сервера. Такое может случиться, если два клиента одновременно пытаются изменить ресурс при помощи метода PUT
410 Gone — «Удалено». Ресурс удален и сервер не знает новое его расположение.
411 Length Required — «Требуется значение заголовка». Сервер отказывается обрабатывать запрос, пока в его заголовках не будет указано значение в поле Content-Length
413 Payload Too Large — «Слишком большое тело запроса». Тело запроса превышает максимально допустимый размер, который сервер может принять.
414 URI Too Long — «Слишком длинный URI». URI превышает максимально допустимую длину. Такое может случиться, если выбран неправильный метод (GET вместо POST)
415 Unsupported Media Type — «Неподдерживаемый медиа формат данных». Сервер отказывается обработать запрос, потому что его содержимое содержит данные в недопустимом для такого метода формате.
416 Range Not Satisfiable — «Диапазон не может быть выполнен». В поле Range указан недопустимый для ресурса диапазон.
417 Expectation Failed — «Недопустимое значение поля Expect». Сервер не может выполнить условие в поле Expect в заголовках запроса.
418 I’m a teapot :)
422 Unprocessable Entity — «Необрабатываемый запрос». Синтаксис запроса правильный, но из-за логической ошибки сервер не может его выполнить. Такой код ошибки может возникнуть, если запрос содержит XML-документ с логической ошибкой
423 Locked — «Заблокировано». Запрашиваемый ресурс заблокирован для запросов с таким методом
424 Failed Dependency — «Невыполненная зависимость». Сервер не смог выполнить запрос, потому что запрашиваемое в нём действие зависело от другого действия, и оно не сработало.
----------------------------------------
500 Internal Server Error — «Внутренняя ошибка сервера». Сервер столкнулся с непредвиденной ошибкой во время обработки запроса.
501 Not Implemented — «Не реализовано». Сервер не поддерживает функционал, который необходим для обработки запроса
502 Bad Gateway — «Неверный шлюз». Сервер получил некорректный ответ от вышестоящего сервера
503 Service Unavailable — «Сервис недоступен». Сервер недоступен, потому что перегружен или на нём проводятся технические работы.
504 Gateway Timeout — «Шлюз не отвечает». Сервер не получил своевременного ответа от вышестоящего сервера и закрыл соединение
505 HTTP Version Not Supported — «Версия HTTP не поддерживается». Сервер не поддерживает версию HTTP, которая указана в заголовках запроса.
507 Insufficient Storage — «Недостаточно места». Сервер не может выполнить запрос, потому что на нём недостаточно свободного места, чтобы сохранить необходимые для выполнения запроса данные.
______________________________________________________________________________________

5) Что такое ядро браузера 

Браузерный движок — это программа, которая берет содержимое веб-страницы: файлы HTML, XML, изображения, ее стили и преобразуте их в изображение на экране.
Используется: браузеры, почтовые клиенты.

Браузер — это оболочка для браузерного движка со своими дополнительными программными надстройками.


Blink: Google(Chrom)
открытый исходный код 
ответвление движка WebKit
лицензия(4): The 3-Clause BSD License 

Gecko: Mozilla(Firefox, Tor Browser)
открытый исходный код
лицензия: Mozilla Public License 2.0

WebKit: Apple(Safari)
открытый исходный код 
лицензия(4): The 3-Clause BSD License

EdgeHTML: Microsoft(Edge)
закрытый исходный код
проприетарная лицензия



6) Какие браузеры какиие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов