
Client_Server
 
1) Прочиать про клиент-серверную архитектуру

Клиент-серверная архитектура - это принципы организации взаимосвязи в сети между заказчиком (клиентом) и поставщиком (сервером), 

- это распределение сетевой нагрузки между заказчиком и поставщиком, которые взаимодействуют между собой через сетевые протоколы.

Клиент - программа с которым работает пользователь, может быть десктопное приложение, браузер или даже сам сервер.

Тонкий клиент( например браузер) - переносит большую часть вычеслительных процессов на сервер,вся бизнес-логика происходит на сервере.

Толстый клиент (1С, все онлайн-игры) - дает расширенную функциональность пользователю не зависимо от центрального сервера, вся обработка и представление данных происходит на машине клиента, а сервер выступает больше как хранилищем данных.
 
Сервер — компьютер, на котором хранится само приложение. Весь код, вся логика, все дополнительные материалы и справочники. 

Сервер нужен потому что:
- (он мощнее) для обработки запросов необходимо мощное железо, а у каждого пользователя его нет
поэтому вся бизнес-логика выноситься на отдельную мощную машину(сервер), что бы обрабатывать информацию быстро и возвращать ее клиенту.
- (не дублируется код) вся логка, код обработки, БД лежать в отдельном месте и много клиентов могут обратиться к серверу, самим им не надо хранить эту информацию
- (это безопаснее) вся информация храниться удаленно и сервер выдает инфо только по запросу и по доступу.

БД (база данных) — хранилище данных, отдельный программный продукт, который позволяет:
- быстро делать выборки информации;
- сохранять информацию даже при рестарте системы. Это называется персистентность.

Плюсы:
- Мощный сервер дешевле 100+ мощных клиентских машин
- Нет дублирования кода 
- Персональные данные в безопасности

Минусы:
- Если упало одно звено, все не работает. 
Для устранения этой проблемы делают кластер серверов а перед ними ставят балансировщик, который будет решать какой из серверов меньше загружен и кому отдать запрос. Аналогично с БД.
    Горячий резерв — когда у нас есть несколько серверов, работающих в параллель, и балансировщик распределяет нагрузку между ними.
    Холодного резерва — когда у нас второй сервер является резервной копией «на всякий случай». Все запросы идут на первый сервер, второй отдыхает.
- Высокая стоимость оборудования 
- Нужно нанять сисадмина
_______________________________________________________________________________________

2) Что ткое HTTP и HTTPS

Транспортные протоколы: TCP(почта) - при передаче файлов есть гарантия, что данные дойдут до клиента или сервера. UDP(онлайн игры) - данные передаются непрерывным потоком и нет гарантии что данные точно дойдут до получателя)

HTTP - протокол прикладного уровня.

HTTP (HyperText Transfer Protocol) - протокол (свод правил) передачи гипертекста для обмена информации в сети. 
Стандартный протокол HTTP передаёт данные в открытом виде, это не безопасно. Порт 80 

HTTPS (HyperText Transfer Protocol Secure) — безопасный протокол передачи гипертекста — это расширение протокола HTTP, осуществляющее шифрование данных посредством протокола TLS или его предшественника - SSL. Порт 443

перед шифрованием сервер отсылает копию SSL-сертификата что бы браузер проверил его подленность у центра сертификации после чего создается ключ шифрования

Плюсы:
- доверие поисковых систем
- шифрование данных
- защита и проверка данных (сайт не испльзует кукис, проверка производиться на каждый сеанс обмена данными, а не основывается на отчетах прошлых сенсов)

Минусы:
- стоимость
- скорость и производительность
- требования к оборудованию

HTTP состоит из:
- основная часть(payload)(полезная нагрузка)
- системная инфа (headers)(заговки) описывается как payload должен передаваться 

обычно ответы с сервера приходят в формате html

HTTP request:
Method/Version of protocol
Headers

HTTP respond:
Version of protocol Status code Status message
Date
Headers
html
_______________________________________________________________________________________

3) HTTP методы 10) Идемпотентные HTTP методы 11) Безопасные HTTP методы

Для того что бы обьяснить серверу что мы хотим сделать с информацией(ресурсом) используются методы

Каждий запрос состоит из: 
- стартовая строка(Status Line) (обязательно), 
- заголовки(HTTP Headers), 
- тело (Content)

(Request line)Стартовая строка запроса формата: METHOD URI HTTP/VERSION
URI -файл или абстрактный обьект, который необходимо получить 

(Message header)Заголовки (пара имя: значение):передается системная информация, кодировка сообщения, версия и имя браузера...

(Entity body)Тело сообщения - передаваемые данные. Для ответа это html-страница,для запроса это файлы загружаемые на сервер.

Методы бывают:
-безопасные (запрос который не меняет состояние сервера (только чтение)) GET, HEAD, OPTIONS
(все безопасные являются идемпотентными)
-небезопасные
-идемпотентные (при повторном вызове идентичного запроса результат одинаковый) GET, HEAD, PUT и DELETE
-неидемпотентные (при повторном выполнении результаты будут отличаться) POST

-кешируемые (ответы результаты которых могут быть сохранены для дальнейшего использования
Метод, используемый в запросе, кешируемый, если это GET или HEAD
PUT и DELETE не кешируемые
Коды ответа, известные системе кеширования, которые рассматриваются как кешируемые: 200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501
PUT стирает кеширование всех методов которые были перед этим

GET — получение ресурса из указанного источника
влияет на содержимое -
кеширование +

POST — создание ресурса
влияет на содержимое +
кеширование -

PUT — загружает содержимое запроса на сервер на указаный URI, если такого URI нет то сервер создаст его и вернется с кодом 201
влияет на содержимое +
кеширование -

DELETE — удаление ресурса
влияет на содержимое +
кеширование -

HEAD - запрашивает ресурс как GET, но ответ приходит без тела.
(используют для проверки существует ли ресурс и не изменился ли он с последнего обращения)

OPTIONS - описание параметров коммуникации между клиентом и сервером.
влияет на содержимое -

CONNECT - преобразует соединение запроса в прозрачный TCP/IP-туннель.

HTML поддерживает только GET и POST метод
______________________________________________________________________________________

17) Хедеры http запросов

Message header (пара имя: значение)
В HTTP-заголовке содержится НЕ чувствительное к регистру название, а затем после (:) значение. 
Пробелы перед значением игнорируются.

Заголовки содержат информацию необходимую для взаимодействия клиента и сервера.

Заголовки делятся на:
    - (Основные) применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле. Date, Cache-Control или Connection.
    - (Заголовки запроса) содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс
    - (Заголовки ответа) содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.
    - (Заголовки сущности) содержат информацию о теле ресурса, например его длину содержимого.

ЗАПРОСЫ:
Host: ru.wikipedia.org 
(Доменное имя и порт хоста запрашиваемого ресурса)

User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
(Имя и версия браузера. Название и версия операционной системы. Язык по умолчанию.) например для того что бы видеть если юзер зашел с телефона переправить его на моб. версию

Accept-Language: en-us,en;q=0.5
(отображает язык по умолчанию что бы подстроить версию сайта под пользователя)

Accept-Encoding: gzip,deflate
(Перечень поддерживаемых способов кодирования содержимого сущности при передаче.)

If-Modified-Since: Sat, 28 Nov 2009 06:38:19 GMT
(если ресурс использовался ранее на сервер отправляется время и если он не изменялся с этого времени ресурс берется с кеша)

Cookie: PHPSESSID=r2t5uvjq435r4q7ib3vtdjq120; foo=bar
(отправляет файлы кукис хранящиеся в браузере)

Referer: https://net.tutsplus.com/
(содержит ссылочный url, например если с главной страницы перейти по ссылке)

Authorization: Basic bXl1c2VyOm15cGFzcw==
(когда вбиваешь логин и пароль отправляется этот хедер с закодированными данными)

ОТВЕТЫ:

Cache-Control: max-age=3600, public
("public" означает, что ответ может быть кэширован кем угодно. "max-age" указывает, сколько секунд действителен кеш. Разрешение кэширования сайта может снизить нагрузку на сервер и пропускную способность, а также увеличить время загрузки в браузере.)

Cache-Control: no-cache
(Кэширование также может быть предотвращено с помощью директивы "no-cache".)

Content-Type: text/html; charset=UTF-8
Content-Type: image/gif
Content-Type: application/pdf
(что именно собой представляет ресурс и как его отобразить)

Content-Disposition: attachment; filename="download.zip"
(заставляет браузер открыть окно загрузки файла)

Content-Length: 89123
(указывает размер контента, например что бы при загрузке видеть сколько всего весит файл)

Location: https://net.tutsplus.com/
(если ресурса нет уже по указанному пути он должен выслать ошибку 301 или 302 и текщее место этого файла)

Content-Encoding: gzip
(отправляет, когда сжимает содержимое)
_____________________________________________________________________________________

13) Что такое IP

IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети.
Набор правил по которым данные передаются между устройствами в сети.

Внутренний(Частный) айпишник идентифицирует личный ПК как устройство локальной сети. 
А внешний(Общедоступный) нужен для выхода в Интернет, он одинаковый со многими другими пользователями.

Типы IP:
Клиентские IP-адреса:
    - Частный IP - используется внутри сети (генерят маршрутизаторы)
    - Общедоступные (за пределами сети(дает провайдер маршрутизатору)):
       -динамические (автоматически регулярно меняются провайдером, что бы если чел. уехал не делать восстановление IP)
       -статические (для больших организаций, которые ставят сервера, и важно что бы веб-сайты были на постоянной IP)
IP-адреса веб-сайтов
    -общие (физ лица, малый и средний бизнес)
    -выделенные (большой бизнес, позволяет упростить передачу данных в компании, получение SSL-сертификата)

Домен – это подпись узла в журнале интернетовских ресурсов.

DNS (domain name system) - технология, которая обеспечивает и устанавливает соответствие домана IP-адресу
Существуют DNS-сервера на которых и хранятся соответствия домен=IP. Для того что бы изменить это соответствие обращаемся к хостинг-провайдерам, что бы они внесли изменение и об этом узнал весь инет (другие DNS-сервера)
_____________________________________________________________________________________

14) Что такое октеты в DNS

DNS-сервер - своего родода контактная книга с помощью которой браузер по имени домена достает IP сайта. Есть локальный DNS-сервер на котором хранятся IP тех сайтов которые пользователь уже посещал раньше. Таким образом следующий раз повторный процесс открытия сайта будет быстрее так как браузер уже не будет запрашивать IP.

Октет = байт = 8 бит

Структура пакета DNS

1. Header — Заголовок DNS пакета, состоящий из 12 октет.

2. Question section — в этой секции DNS-клиент передает запросы DNS-серверу сообщая о том, для какого имени необходимо разрешить (зарезолвить) запись DNS, а также какого типа. Сервер при ответе, копирует эту информацию и отдает клиенту обратно в этой же секции.

3. Answer section — сервер сообщает клиенту ответ или несколько ответов на запрос, в котором сообщает вышеуказанные данные.

4. Authoritative Section — содержит сведения о том, с помощью каких авторитетных серверов было получена информация включенная в секцию DNS-ответа.

5. Additional Record Section — дополнительные записи, которые относятся к запросу, но не являются строго ответами на вопрос.

Записей в секциях может быть как несколько, так и не быть вообще. Всё определяется заголовком.
_____________________________________________________________________________________

9) URL (URI, URL, URN)

URI (Uniform Resource Identifier) – это строка, где содержится или название или адрес ресурса или и то и то, по которой можно найти ресурс на сервере.

- Схема (scheme) - показывает на то, как обращаться к ресурсу, чаще всего это сетевой протокол (http, ftp, ldap)
- Иерархическая часть (hier-part) - данные, необходимые для идентификации ресурса (например, адрес сайта)
- Запрос (query) - необязательные данные ресурса (например, поисковой запрос)
- Фрагмент (fragment) – необязательный компонент для идентификации вторичного ресурса ресурса (например, место на странице)

URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

URL (Uniform Resource Locator) - это строка, где указан только адрес ресурса, по которому его можно найти на сервере.

- Протокол, который используется для доступа к ресурсу – http, https, ftp
- Расположение сервера с использованием IP-адреса или имени домена.
например, wiki.merionet.ru - это имя домена. 
https://192.168.1.17 - здесь ресурс расположен по указанному IP-адресу
- Номер порта на сервере. Например, http://localhost: 8080, где 8080 - это порт.
- Точное местоположение в структуре каталогов сервера. Например - https://wiki.merionet.ru/ip-telephoniya/ 
- Необязательный идентификатор фрагмента. Например, https://www.google.com/search?ei=qw3eqwe12e1w&q=URL, где q = URL - это строка запроса, введенная пользователем.
Синтаксис:

[protocol]://www.[domain_name]:[port 80]/[path or exaction resource location]?[query]#[fragment]

URN (Uniform Resource Name) - это строка, где указано только название ресурса, по которому его можно найти на сервере.
_____________________________________________________________________________________

4) HTTP статус коды сервера

1хх: (информационные коды) указывают, что запрос, инициированный браузером, продолжается.
2хх: (коды успешного запроса) возвращаются, когда запрос браузера был успешно получен, распознан и обработан сервером.
3хх: (коды перенаправления) возвращаются, когда запрошенный ресурс заменен новым.
4хх: (коды ошибок клиента) указывают на наличие проблемы с запросом.
5хх: (коды ошибок сервера) указывают, что запрос был принят, но ошибка на сервере не позволила выполнить его

100 Continue — сообщает, что сервер получтл первую часть запроса и готов принять остальную часть
101 Switching Protocols - сервер меняет протокол. Отправляется при наличии в запросе заголовка Upgrade
102 Processing - сервер в процессе формирования ответа, но обработка запроса еще не завершина.
103 Early Hints — сервер дает придварительный ответ с частью заголовков. Используется, когда сервер не может быстро сформировать все заголовки.
----------------------------------------
200 OK — сервер успешно обработал запрос
201 Created — сервер успешно обработал запрос и создал новый ресурс
202 Accepted — сервер начал обрабатывать запрос, но пока ещё не закончил процесс. В конечном итоге обработка запроса может как завершиться, так и не завершиться.
203 Non-Authoritative Information - сервер успешно обработал запрос, но ответ пришел не от первоисточника
204 No Content — сервер успешно обработал запрос, но кроме заголовков ответа нет содержимого, которое можно было бы отправить в ответ.
205 Reset Content (Сбросить содержимое) — сервер успешно обработал запрос и отправил в ответ команду сбросить данные, которые пользователь ввёл, перед тем как отправить запрос.
206 Partial Content (Частичное содержимое) —  сервер успешно обработал частичный запрос и отправил содержимое, указанное в заголовке Content-Range. Используется, например, для возобновления поставленной на паузу загрузки
----------------------------------------
300 Multiple Choices — «Множественный выбор» - есть несколько возможных ответов на запрос. Например, на сервере есть несколько типов файлов, которые отвечают условиям запроса. Пользователь или user-agent должен выбрать один из вариантов. 
301 Moved Permanently — «Перемещено навсегда» -запрашиваемый ресурс теперь доступен по новому URI и при последующих запросах надо использовать именно его.
302 Found — «Найдено» - запрашиваемый ресурс временно доступен по другому URI и при последующих запросах надо использовать старый URI
303 See Other — «Смотри в другом месте» - запрашиваемый ресурс нужно искать по другому URI с методом запроса GET, несмотря на то, что в изначальном запросе мог быть другой метод.
304 Not Modified — «Не изменено» - запрашиваемый ресурс не был изменён, поэтому надо использовать его кэшированную версию
----------------------------------------
400 Bad Request — «Неверный запрос». Сервер не может обработать запрос, потому что не понимает его. Например, из-за синтаксической ошибки
401 Unauthorized — «Неавторизованно». Сервер не может обработать запрос без аутентификации. Нужно добавить в заголовок запроса поле Authorization или проверить правильность данных в этом поле, если оно уже присутствует.
403 Forbidden — «Запрещено». Сервер отказывается обработать запрос, потому что у пользователя нет прав на просмотр содержимого.
404 Not Found — «Не найдено». Сервер не может найти запрашиваемый ресурс. 
405 Method Not Allowed — «Метод запрещён». Указанный в запросе метод нельзя использовать. Сервер ОБЯЗАН указать доступные методы в заголовке Allow.
406 Not Acceptable — «Неприемлемо». На сервере нет контента, который отвечает указанным в заголовках запроса характеристикам.
407 Proxy Authentication Required - Этот код ответа аналогичен коду 401, только аутентификация требуется для прокси сервера.
408 Request Timeout — «Истекло время ожидания ответа на запрос». Сервер не получил запрос полностью в течение максимально допустимого для этого времени. Такой код может возникнуть при передаче данных большого объёма методом PUT или POST.
409 Conflict — «Конфликт». Сервер не смог обработать запрос из-за того что содержимое этого запроса вступило в конфликт с параметрами сервера. Такое может случиться, если два клиента одновременно пытаются изменить ресурс при помощи метода PUT
410 Gone — «Удалено». Ресурс удален и сервер не знает новое его расположение.
411 Length Required — «Требуется значение заголовка». Сервер отказывается обрабатывать запрос, пока в его заголовках не будет указано значение в поле Content-Length
413 Payload Too Large — «Слишком большое тело запроса». Тело запроса превышает максимально допустимый размер, который сервер может принять.
414 URI Too Long — «Слишком длинный URI». URI превышает максимально допустимую длину. Такое может случиться, если выбран неправильный метод (GET вместо POST)
415 Unsupported Media Type — «Неподдерживаемый медиа формат данных». Сервер отказывается обработать запрос, потому что его содержимое содержит данные в недопустимом для такого метода формате.
416 Range Not Satisfiable — «Диапазон не может быть выполнен». В поле Range указан недопустимый для ресурса диапазон.
417 Expectation Failed — «Недопустимое значение поля Expect». Сервер не может выполнить условие в поле Expect в заголовках запроса.
418 I’m a teapot :)
422 Unprocessable Entity — «Необрабатываемый запрос». Синтаксис запроса правильный, но из-за логической ошибки сервер не может его выполнить. Такой код ошибки может возникнуть, если запрос содержит XML-документ с логической ошибкой
423 Locked — «Заблокировано». Запрашиваемый ресурс заблокирован для запросов с таким методом
424 Failed Dependency — «Невыполненная зависимость». Сервер не смог выполнить запрос, потому что запрашиваемое в нём действие зависело от другого действия, и оно не сработало.
----------------------------------------
500 Internal Server Error — «Внутренняя ошибка сервера». Сервер столкнулся с непредвиденной ошибкой во время обработки запроса.
501 Not Implemented — «Не реализовано». Сервер не поддерживает функционал, который необходим для обработки запроса
502 Bad Gateway — «Неверный шлюз». Сервер получил некорректный ответ от вышестоящего сервера
503 Service Unavailable — «Сервис недоступен». Сервер недоступен, потому что перегружен или на нём проводятся технические работы.
504 Gateway Timeout — «Шлюз не отвечает». Сервер не получил своевременного ответа от вышестоящего сервера и закрыл соединение
505 HTTP Version Not Supported — «Версия HTTP не поддерживается». Сервер не поддерживает версию HTTP, которая указана в заголовках запроса.
507 Insufficient Storage — «Недостаточно места». Сервер не может выполнить запрос, потому что на нём недостаточно свободного места, чтобы сохранить необходимые для выполнения запроса данные.
______________________________________________________________________________________

15) Что такое порт, сколько портов у Linux сервера

порт - логический объект, который является конечной точкой связи. Он непосредственно связан с процессом или службой в операционной системе и необходим для того что бы обращаться к конкретным программам на устройстве. При этом, любой порт способен находиться в одном из четырех возможных состояний: открытом, закрытом, отфильтрованном (filtered) или нефильтрованном (unfiltered).
 UDP и TCP поддерживают систему портов
Сейчас существует 65 535 портов
22 - ssh (SSH (Secure SHell) — криптографический сетевой протокол для безопасной передачи данных) 
31 - FTP
в протоколе HTTP используется порт 80, а в протоколе HTTPS — порт 443

Обмен данными по сети ведётся между двумя процессами по определённому протоколу. Для установки соединения необходимы:
- номер протокола;
- два IP-адреса (адрес хоста-отправителя и адрес хоста-получателя для построения маршрута между ними);
- два номера порта (порт процесса-отправителя и порт получателя).


Порт процесса-отправителя (источника) может быть постоянным (статическим) или назначаться динамически для каждого нового сеанса связи.

При соединении по протоколу TCP порт процесса-отправителя используется:

операционной системой хоста-получателя для отправки пакета-подтверждения о получении данных;
процессом-получателем для отправки пакета-ответа.
При соединении по протоколу UDP допустимо вместо порта процесса-отправителя указывать число ноль, означающее «порт не указан».
_____________________________________________________________________________________

5) Что такое ядро браузера  6) Какие браузеры какиие ядра используют

Браузерный движок — это программа, которая берет содержимое веб-страницы: файлы HTML, XML, изображения, ее стили и преобразуте их в изображение на экране.
Используется: браузеры, почтовые клиенты.

Браузер — это оболочка для браузерного движка со своими дополнительными программными надстройками.

Blink: Google(Chrom, Yandex, Opera)
открытый исходный код 
ответвление движка WebKit
лицензия(4): The 3-Clause BSD License 


WebKit: Apple(Safari, Steam, Android и iOS, Mail.ru)
открытый исходный код 
на основе движка KHTML
лицензия(4): The 3-Clause BSD License
- кроссплатформенность +
- плагины +

Gecko: Mozilla(Firefox, Tor Browser)
открытый исходный код
лицензия: Mozilla Public License 2.0
- кроссплатформенность +
- плагины +
- потребляет меньше всего ресурсов ПК 
- быстро работает с большим количеством вкладо

EdgeHTML: Microsoft(Edge)
закрытый исходный код
проприетарная лицензия
______________________________________________________________________________________

12) Идентфикация, Аутентификация, Авторизация

Идентификация — процесс распознавания пользователя по его идентификатору (логину).
Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает(пароль).
Авторизация — предоставление определённых прав.
_____________________________________________________________________________________

16) Уровни OSI

OSI - модель сетевого взаимодействия, описыват то ка должны взаимодействовать машины друг с другом в сети.

OSI нужна для того что бы разделить ответственность между людьми и оборудованием в процессе передачи данных в сети.

1. Физический (physical) - отвечает за выбор среды передачи данных («витая пара», коаксиальный, оптоволоконный), радиоканал)
    Тип данных: бит
    Оборудование:Концентратор,Повторитель
2. Канальный (data link) - получает биты превращая их в кадры, проверяет и по возможности исправляет + происходит физическая адресация сетевых устройств
    - Подуровень MAC. (определяется доступ к физической среде, за счет данного подуровня канальный уровень может взаимодействовать с НЕСКОЛЬКИМИ физическими уровнями)
    - Подуровень LLC. Данный подуровень обеспечивает взаимодействие с сетевым уровнем модели OSI. 
    Тип данных: кадры (состоит из битов)
    Оборудование: Коммутатор(обьеденяет например много роутеров)
3. Сетевой (network) - маршрутизаторы получают MAC-адрес от коммутаторов с предыдущего уровня и занимаются построением маршрута от одного устройства к другому с учетом всех потенциальных неполадок в сети + MAC-адрес преобразуется в IP-адрес и наоборот.
    Тип данных: пакеты
    Оборудование: роутер, маршрутизатор 
    Протокол: IP 
4. Транспортный (transport) - обеспечивает передачу данных от отправителя к получателю.
    Оборудование: хосты
    Протокол: TCP UDP 
5. Сеансовый (session) - поддержает сеансы связи, позволяя приложениям взаимодействовать между собой длительное время (создает завершает поддеривает)
    Оборудование: хосты
6. Представления (presentation) - своеобразный переводчик, преобразует данные, которые понятны машине, в данные, которые понятны человеку и наоборот + шифрование данных.
7. Прикладной (application) - то, с чем взаимодействуют пользователи, своего рода графический интерфейс всей модели. + передача файлов по сети

7) Что такое API


веб-сервис - это программа которая организовывает взаимодействие между сайтами через формат xml и json.

API (аббревиатура от Application Programming Interface) – это специальный интерфейс (набор команд/элементов управления), который предназначен для взаимодействия разных систем(программ)между собой.

Local API - это то, что позволяет компонентам одной системы взаимодействовать друг с другом.
Remote API - это то, что позволят связывать между собой несколько систем(веб сервисов).
    1. SOAP (протокол сильно ограничен правилами) - для передаче инфы используют xml
    формати: XML.
    протоколы: HTTP, HTTS...
        - XSD( описывает как должен структурироваться html документ и типы данных которые там могут храниться)
           *****       
        - WSDL(обязателен)(описывает структуру веб сервиса)
            1. Сообщения которые использует веб-сервис
            2. Типы данных (виды отправляемых и получаемых сообщений)(например string)
            3. Список операций которые могут выполняться c сообщениями (ответы, запросы)
    2. REST (архитектурный стиль нет огромного количества правил) - описывается структура передачи информации у веб-сервисов 
    формати: JSOM, xml, txt...
    протоколы: HTTP, HTTS.

**** 
правила xml
    1. открывающийся тег(внутри могут быть атрибуты) <name attribute>
    2. контент
    3. закрывающийся тег </name>
    4. Может быть только один корневой тег 
    5. Все елементы имеют закрывающий тег
    6. Названия тега регистрозависимые 
    7. Теги не пересикаются
    8. Все атрибуты заключены в кавычки cat="Jhon"
    9. Спец символы нельзя использовать в сонтексте (нужно записывать в текстовом формате)
    10. Первой строкой - обявляем XML

Способы вызова API:
1. Вызов фун-ции системой (для локального API)
2. Вызов метода другой системы (обращение к другой системе)
3. Вызов метода человеком (через постман так быстрее)
4. GUI>>API
_____________________________________________________________________________________

8. Что такое ендпоинты

Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения.

